{
  "id": "f3a12301-1e73-4d34-ab6b-4a5da9a1616c",
  "title": "Logistics - Container Tracking Demo Data",
  "tasks": {
    "logistics_container_tracking": {
      "name": "logistics_container_tracking",
      "action": "dynatrace.automations:run-javascript",
      "description": "Build a custom task running js Code",
      "input": {
        "script": "import { businessEventsClient } from '@dynatrace-sdk/client-classic-environment-v2';\nimport crypto from 'crypto';\n\nfunction generateMTTD_MTTR_MTTI() {\n  const MTTD = Math.floor(Math.random() * 6) + 1;  // MTTD between 1 and 6\n  const MTTI = Math.floor(Math.random() * 10) + MTTD + 1; // MTTI is greater than MTTD\n  const MTTR = Math.floor(Math.random() * 10) + MTTI + 1; // MTTR is greater than MTTI\n  return { MTTD, MTTI, MTTR };\n}\n\n// -----------------------------\n// Configuration Section\n// -----------------------------\n\nconst activeConfig = {\n  sector: \"BizEvents - Logistics - Container Tracking\", \n  numberOfContainers: 500, // Number of containers to generate\n  productTypes: [\n    { type: \"Food\", price: 5000 },\n    { type: \"Beverages\", price: 3000 },\n    { type: \"Refrigerated\", price: 8000 }\n  ],\n  shipNumber: `SHIP-${Math.floor(Math.random() * 1000) + 60}`,  // Generate a random ship number\n  origin: \"Port of Los Angeles\",  // Set origin\n  destination: \"Port of Rotterdam\",  // Set destination\n  steps: [\n    { \n      stepName: \"Container Booking\", \n      kpi: \"Booking Time\", \n      details: \"The container is booked for transportation\", \n      subSteps: [\"Receive Booking Request\", \"Confirm Booking\", \"Assign Container\"],\n      error: \"Booking Error\", \n      injectionMethod: \"Logistics Platform - SAP TM\", \n      ...generateMTTD_MTTR_MTTI(), \n      incidentNumber: null\n    },\n    { \n      stepName: \"Container Allocation\", \n      kpi: \"Allocation Efficiency\", \n      details: \"Container is allocated for the shipment\", \n      subSteps: [\"Allocate Available Container\", \"Prepare for Pickup\"],\n      error: \"Allocation Error\", \n      injectionMethod: \"Logs\",  \n      ...generateMTTD_MTTR_MTTI(),\n      incidentNumber: null\n    },\n    { \n      stepName: \"Container Collection\", \n      kpi: \"Pickup Time\", \n      details: \"The container is collected from the warehouse\", \n      subSteps: [\"Assign Pickup Vehicle\", \"Collect Container\", \"Confirm Collection\"],\n      error: \"Collection Delay\", \n      injectionMethod: \"GPS Tracking\", \n      containerWeight: Math.floor(Math.random() * 5000) + 1000,\n      ...generateMTTD_MTTR_MTTI(),\n      containerEmptyFlag: Math.random() < 0.5,\n      incidentNumber: null\n    },\n    { \n      stepName: \"Container Inspection\", \n      kpi: \"Inspection Efficiency\", \n      details: \"Container is inspected before loading\", \n      subSteps: [\"Inspect Container Condition\", \"Confirm Inspection\", \"Prepare for Loading\"],\n      error: \"Inspection Failed\", \n      containerEmptyFlag: Math.random() < 0.5,\n      injectionMethod: \"IoT Sensors\", \n      ...generateMTTD_MTTR_MTTI(),\n      incidentNumber: null\n    },\n    { \n      stepName: \"Loading Goods\", \n      kpi: \"Loading Time\", \n      details: \"Goods are loaded into the container\", \n      subSteps: [\"Prepare Goods\", \"Load Goods\", \"Secure Goods in Container\"],\n      error: \"Loading Delay\", \n      injectionMethod: \"Rest API\", \n      ...generateMTTD_MTTR_MTTI(),\n            costAtPort: Math.floor(Math.random() * 10) + 1000,\n\n      incidentNumber: null\n    },\n    { \n      stepName: \"Container Sealing\", \n      kpi: \"Sealing Time\", \n      details: \"Container is sealed for transportation\", \n      subSteps: [\"Seal Container\", \"Confirm Sealing\", \"Prepare for Transport\"],\n      error: \"Sealing Error\", \n      includeTotal: true,\n      containerWeight: Math.floor(Math.random() * 5000) + 1000, \n      injectionMethod: \"IoT Sensors\", \n      costAtPort: Math.floor(Math.random() * 10) + 1000,\n      ...generateMTTD_MTTR_MTTI(),\n      incidentNumber: null\n    },\n    { \n      stepName: \"Container Transport to Port\", \n      kpi: \"Transport Time to Port\", \n      details: \"Container is transported to the port\", \n      subSteps: [\"Assign Transport\", \"Monitor Transport\", \"Arrive at Port\"],\n      error: \"Transport Delay\", \n      injectionMethod: \"GPS Tracking\", \n      containerEmptyFlag: Math.random() < 0.5,\n      costAtPort: Math.floor(Math.random() * 10) + 1000,\n      ...generateMTTD_MTTR_MTTI(),\n      incidentNumber: null\n    },\n    { \n      stepName: \"Container Loading to Ship\", \n      kpi: \"Port Loading Time\", \n      details: \"Container is loaded onto the ship at the port\", \n      subSteps: [\"Crane Operation\", \"Loading Confirmation\"],\n      error: \"Loading Error\", \n      shipWeight: Math.floor(Math.random() * 500000) + 1000, \n      injectionMethod: \"Logistics Platform - SAP TM\", \n      ...generateMTTD_MTTR_MTTI(), \n      incidentNumber: null\n    },\n   { \n      stepName: \"Sea Transit\", \n      kpi: \"Transit Duration at Sea\",\n      details: \"Container in transit at sea\", \n      subSteps: [\"Monitor Ship Route\", \"Provide Updates\", \"Track ETA\"],\n      error: \"Transit Delay\", \n      includeTotal: true,\n      shipWeight: Math.floor(Math.random() * 500000) + 1000, \n      transitTimeHours: Math.floor(Math.random() * 100) + 1,  \n      injectionMethod: \"GPS Tracking\", \n      ...generateMTTD_MTTR_MTTI(),\n      incidentNumber: null\n    },\n    { \n      stepName: \"Container Loading at Destination Port\", \n      kpi: \"Unload Time\", \n      details: \"Container is unloaded at the destination port\", \n      subSteps: [\"Crane Operation\", \"Unloading Confirmation\"],\n      error: \"Unloading Delay\", \n      injectionMethod: \"Logs\", \n      containerEmptyFlag: Math.random() < 0.5,\n      costAtPort: Math.floor(Math.random() * 10) + 1000,\n      includeTotal: true,\n      ...generateMTTD_MTTR_MTTI(),\n      incidentNumber: null\n    },\n    { \n      stepName: \"Container Transport to Warehouse\", \n      kpi: \"Transport Time to Warehouse\", \n      details: \"Container is transported from the port to the warehouse\", \n      subSteps: [\"Assign Transport\", \"Monitor Transport\", \"Arrive at Warehouse\"],\n      error: \"Transport Delay\", \n      injectionMethod: \"GPS Tracking\", \n      costAtPort: Math.floor(Math.random() * 10) + 1000,\n      containerEmptyFlag: Math.random() < 0.5,\n      ...generateMTTD_MTTR_MTTI(),\n      incidentNumber: null\n    },\n    { \n      stepName: \"Container Delivery and Return\", \n      kpi: \"Delivery Time\", \n      details: \"Container delivered to customer and returned\", \n      subSteps: [\"Deliver Goods\", \"Return Empty Container\"],\n      error: \"Delivery Error\", \n      containerEmptyFlag: Math.random() < 0.5,\n      costAtPort: Math.floor(Math.random() * 10) + 1000,\n      includeTotal: true,\n      injectionMethod: \"Rest API\", \n      ...generateMTTD_MTTR_MTTI(),\n      incidentNumber: null\n    }\n  ]\n};\n\n// -----------------------------\n// Core Utilities\n// -----------------------------\n\n// Generate random timestamp within the last 24 hours\nfunction generateRandomTimestampWithin24Hours() {\n  const now = new Date();\n  const past24Hours = new Date(now.getTime() - 24 * 60 * 60 * 1000);  \n  return new Date(past24Hours.getTime() + Math.random() * (now.getTime() - past24Hours.getTime()));\n}\n\n// Generate a unique container ID\nfunction generateContainerId() {\n  return `CONTAINER-${crypto.randomUUID()}`;\n}\n\n// Generate random container price between 1000 and 5000\nfunction generateContainerPrice() {\n  return Math.floor(Math.random() * 4000) + 1000;\n}\n\n// Select a random product for the container\nfunction selectRandomProduct() {\n  const productTypes = activeConfig.productTypes;\n  const randomIndex = Math.floor(Math.random() * productTypes.length);\n  return productTypes[randomIndex];\n}\n\n// Generate incident number for tracking issues/errors\nfunction generateIncidentNumber() {\n  return `INC000${Math.floor(Math.random() * 1000000).toString().padStart(6, '0')}`;\n}\n\n// -----------------------------\n// Core Functions for Shipping Container Tracking\n// -----------------------------\n\nfunction createSubStep(baseStep, stepNumber, config, subStepIndex, timestamp) {\n  const subStepDescription = config.steps[stepNumber - 1].subSteps[subStepIndex - 1];\n  const subStepError = Math.random() < 0.2 ? \"Generated SubStep Error\" : null;\n  const incidentNumber = subStepError ? generateIncidentNumber() : null;\n\n  return {\n    ...baseStep,\n    step: `Step${stepNumber}.${subStepIndex}`,  // Prefix step number with \"Step\"\n    type: `${baseStep.type.split(' - ')[0]} - ${subStepDescription}`,\n    timestamp: timestamp.toISOString(),\n    error: subStepError,\n    injectionMethod: config.steps[stepNumber - 1].injectionMethod,\n        incidentNumber: incidentNumber\n  };\n}\n\nfunction determineContainerLocation(stepNumber, config) {\n  if (stepNumber <= 8) {\n    return config.origin;  // Starting location is the origin (e.g., Port of Los Angeles)\n  } else if (stepNumber >= 9) {\n    return config.destination;  // Final location is the destination (e.g., Port of Rotterdam)\n  } else {\n    return \"In Transit\";  // For steps between origin and destination, set to \"In Transit\"\n  }\n}\n\nfunction createStep(containerId, config, stepNumber, timestamp, containerPrice, isError = false, subStep = null) {\n  const step = config.steps[stepNumber - 1];\n  const error = isError || step.error || null;\n  const MTTD = error ? step.MTTD : null;\n  const MTTR = error ? step.MTTR : null;\n  const MTTI = error ? step.MTTI : null;\n  const incidentNumber = error ? generateIncidentNumber() : null;\n  const currentLocation = determineContainerLocation(stepNumber, config);  // Determine current location\n\n  return {\n    containerId: containerId,\n    incidentNumber: incidentNumber,\n    kpi: step.kpi,\n    details: step.details,\n    step: subStep ? `Step${stepNumber}.${subStep}` : `Step${stepNumber}`,  // Prefix with \"Step\"\n    timestamp: timestamp.toISOString(),\n    error: error,\n    MTTD: MTTD,\n    MTTR: MTTR,\n    MTTI: MTTI,\n    shipNumber: step.shipNumber || config.shipNumber,  // Ensure ship number is used\n    origin: step.origin || config.origin,  // Ensure origin is used\n    destination: step.destination || config.destination,  // Ensure destination is used\n    costAtPort: step.costAtPort,\n    transitTimeHours: step.transitTimeHours,\n    containerEmptyFlag: step.containerEmptyFlag,\n    shipWeight: step.shipWeight,\n    containerWeight: step.containerWeight,\n    containerPrice: containerPrice,  // Add container price for each step\n    currentLocation: currentLocation,  // Add current location for each step\n    incidentNumber: incidentNumber,\n    type: subStep ? `${step.stepName} - ${step.subSteps[subStep - 1]}` : step.stepName,\n    injectionMethod: step.injectionMethod,\n    source: config.sector,\n    serviceResponseTime: (Math.random() * 5).toFixed(2),\n  };\n}\n\n\n// Generate the container journey with steps\nfunction generateContainerJourney(config, containerId, product, containerPrice) {\n  const steps = [];\n  const timestamps = Array.from({ length: config.steps.length }, generateRandomTimestampWithin24Hours).sort((a, b) => a - b);\n\n  for (let i = 0; i < config.steps.length; i++) {\n    const stepTimestamp = timestamps[i];\n    const isError = Math.random() < 0.1;  // Simulating 10% chance of error\n    const continueJourney = Math.random() < 0.9;  // Simulating 90% journey completion rate\n\n    const step = createStep(containerId, config, i + 1, stepTimestamp, containerPrice, isError);\n    steps.push({ ...step, productType: product.type, productPrice: product.price });\n\n    if (isError) break;  // Stop if there's an error in the main step\n\n    if (continueJourney) {\n      for (let subStepIndex = 1; subStepIndex <= config.steps[i].subSteps.length; subStepIndex++) {\n        const subStepTimestamp = new Date(stepTimestamp.getTime() + subStepIndex * 60000);  // Substeps occur 1 minute apart\n        const subStep = createSubStep(step, i + 1, config, subStepIndex, subStepTimestamp);\n        steps.push(subStep);\n\n        if (subStep.error) break;  // Stop further substeps if an error occurs in a substep\n      }\n    } else {\n      break;  // Stop journey if not continuing\n    }\n  }\n\n  return steps;\n}\n\n// Function to retrieve and generate container data\nasync function getContainerData() {\n  const containers = [];\n  let totalRevenue = 0;\n\n  for (let i = 0; i < activeConfig.numberOfContainers; i++) {\n    const containerId = generateContainerId();\n    const product = selectRandomProduct();  // Select random product for each container\n    const containerPrice = generateContainerPrice();  // Generate random container price\n    containers.push(...generateContainerJourney(activeConfig, containerId, product, containerPrice));\n    totalRevenue += product.price;\n  }\n\n  console.log(`Total Revenue: $${totalRevenue}`);\n  return containers;\n}\n\n// Function to send data to Dynatrace\nasync function sendDataToDynatrace(data) {\n  try {\n    const bizevents = data.map(event => ({\n      id: crypto.randomUUID(),\n      'event.provider': event.source,\n      'event.type': event.type,\n      step: event.step,\n      containerId: event.containerId,\n      incidentNumber: event.incidentNumber,\n      kpi: event.kpi,\n      details: event.details,\n      timestamp: event.timestamp,\n      costAtPort: event.costAtPort,\n      transitTimeHours: event.transitTimeHours,\n      containerEmptyFlag: event.containerEmptyFlag,\n      error: event.error,\n      MTTD: event.MTTD,\n      MTTR: event.MTTR,\n      MTTI: event.MTTI,\n      currentLocation: event.currentLocation,\n      shipNumber: event.shipNumber,\n      origin: event.origin,\n      destination: event.destination,\n      shipWeight: event.shipWeight,\n      containerWeight: event.containerWeight,\n      containerPrice: event.containerPrice,  // Include container price in data sent\n      injectionMethod: event.injectionMethod,\n      productType: event.productType,\n      productPrice: event.productPrice,\n      serviceResponseTime: event.serviceResponseTime,\n    }));\n\n    console.log('Payload being sent:', JSON.stringify(bizevents, null, 2));\n\n    const response = await businessEventsClient.ingest({\n      type: 'application/json',\n      body: bizevents\n    });\n\n    console.log('Data sent successfully:', response);\n  } catch (error) {\n    console.error('Error sending data to Dynatrace:', error);\n  }\n}\n\n// Function to ingest container data\nasync function ingestData() {\n  try {\n    const containerData = await getContainerData();\n    if (containerData.length > 0) {\n      await sendDataToDynatrace(containerData);\n      console.log(`${activeConfig.sector} data ingested successfully`);\n    } else {\n      console.error(\"No container data generated.\");\n    }\n  } catch (error) {\n    console.error('Error in ingestData function:', error);\n  }\n}\n\n// Start the data ingestion process\ningestData();\n\n"
      },
      "position": {
        "x": 0,
        "y": 1
      },
      "predecessors": []
    }
  },
  "description": "",
  "actor": "fa94290b-310d-429d-a688-9fe5484de482",
  "owner": "fa94290b-310d-429d-a688-9fe5484de482",
  "ownerType": "USER",
  "isPrivate": true,
  "trigger": {},
  "schemaVersion": 3
}